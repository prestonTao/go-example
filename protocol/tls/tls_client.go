package main

import (
	// "bytes"
	// "encoding/binary"
	"fmt"
	"net"
	// "time"
	// "math/big"
	// "math/rand"
)

var baiduClientHello = []byte{0x16, 0x03, 0x01, 0x00, 0xd0, 0x01, 0x00, 0x00, 0xcc, 0x03, 0x03, 0x22, 0x9d, 0xcc, 0x74, 0x8c,
	0xa5, 0x18, 0x2e, 0xa7, 0x48, 0x0f, 0xc0, 0x0a, 0xea, 0x13, 0xc7, 0x6f, 0xd7, 0x9d, 0x42, 0x47,
	0xcc, 0x58, 0x6f, 0x99, 0x0a, 0xad, 0x3e, 0x38, 0xdf, 0x6e, 0x69, 0x00, 0x00, 0x28, 0xcc, 0x14,
	0xcc, 0x13, 0xc0, 0x2b, 0xc0, 0x2f, 0x00, 0x9e, 0xc0, 0x0a, 0xc0, 0x09, 0xc0, 0x13, 0xc0, 0x14,
	0xc0, 0x07, 0xc0, 0x11, 0x00, 0x33, 0x00, 0x32, 0x00, 0x39, 0x00, 0x9c, 0x00, 0x2f, 0x00, 0x35,
	0x00, 0x0a, 0x00, 0x05, 0x00, 0x04, 0x01, 0x00, 0x00, 0x7b, 0x00, 0x00, 0x00, 0x12, 0x00, 0x10,
	0x00, 0x00, 0x0d, 0x77, 0x77, 0x77, 0x2e, 0x62, 0x61, 0x69, 0x64, 0x75, 0x2e, 0x63, 0x6f, 0x6d,
	0xff, 0x01, 0x00, 0x01, 0x00, 0x00, 0x0a, 0x00, 0x08, 0x00, 0x06, 0x00, 0x17, 0x00, 0x18, 0x00,
	0x19, 0x00, 0x0b, 0x00, 0x02, 0x01, 0x00, 0x00, 0x23, 0x00, 0x00, 0x33, 0x74, 0x00, 0x00, 0x00,
	0x10, 0x00, 0x1b, 0x00, 0x19, 0x06, 0x73, 0x70, 0x64, 0x79, 0x2f, 0x33, 0x08, 0x73, 0x70, 0x64,
	0x79, 0x2f, 0x33, 0x2e, 0x31, 0x08, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x31, 0x2e, 0x31, 0x75, 0x50,
	0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
	0x0d, 0x00, 0x12, 0x00, 0x10, 0x04, 0x01, 0x05, 0x01, 0x02, 0x01, 0x04, 0x03, 0x05, 0x03, 0x02,
	0x03, 0x04, 0x02, 0x02, 0x02}

func main() {
	hello()

}

func hello() {
	serverNameStr := "104.236.161.121:8081"
	serverNameStr = "www.baidu.com"
	pack := getBytes(serverNameStr)
	conn, err := net.Dial("tcp", "www.baidu.com:443")
	if err != nil {
		fmt.Println(err.Error())
	}
	_, err = conn.Write(pack)
	if err != nil {
		fmt.Println(err.Error())
	}
	fmt.Println("write done")
	buf := make([]byte, 10000)
	n, err := conn.Read(buf)
	if err != nil {
		fmt.Println(err.Error())
	}
	fmt.Println("lenght: ", n, "\n", buf[:n])

}

func getBytes(serverNameStr string) []byte {
	// serverNameStr := "104.236.161.121:8081"
	pack := []byte{
		0x16, 0x03, 0x01, 0x00,
		0xd0, 0x01, //   length
		0x00, 0x00, 0xcc, 0x03, 0x03, 0xbf, 0x8a, 0x36, 0x7d, 0x13,
		0x86, 0x59, 0x90, 0x95, 0x4b, 0xc6, 0x03, 0xe0, 0x53, 0x03, 0x58, 0x6b, 0x28, 0x23, 0x8a, 0x29,
		0xe6, 0x4b, 0xbb, 0x95, 0xe4, 0xb8, 0x52, 0x93, 0x28, 0xe1, 0x55, 0x00, 0x00, 0x28, 0xcc, 0x14,
		0xcc, 0x13, 0xc0, 0x2b, 0xc0, 0x2f, 0x00, 0x9e, 0xc0, 0x0a, 0xc0, 0x09, 0xc0, 0x13, 0xc0, 0x14,
		0xc0, 0x07, 0xc0, 0x11, 0x00, 0x33, 0x00, 0x32, 0x00, 0x39, 0x00, 0x9c, 0x00, 0x2f, 0x00, 0x35,
		0x00, 0x0a, 0x00, 0x05, 0x00, 0x04, 0x01, 0x00, 0x00, 0x7b, 0x00, 0x00, 0x00, 0x12,
		0x00, 0x10, //  server length
		0x00, 0x00, //  server name type
		0x0d, //  length
		//  server name
		0xff, 0x01, 0x00, 0x01, 0x00, 0x00, 0x0a, 0x00, 0x08, 0x00, 0x06, 0x00, 0x17, 0x00, 0x18, 0x00,
		0x19, 0x00, 0x0b, 0x00, 0x02, 0x01, 0x00, 0x00, 0x23, 0x00, 0x00, 0x33, 0x74, 0x00, 0x00, 0x00,
		0x10, 0x00, 0x1b, 0x00, 0x19, 0x06, 0x73, 0x70, 0x64, 0x79, 0x2f, 0x33, 0x08, 0x73, 0x70, 0x64,
		0x79, 0x2f, 0x33, 0x2e, 0x31, 0x08, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x31, 0x2e, 0x31, 0x75, 0x50,
		0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
		0x0d, 0x00, 0x12, 0x00, 0x10, 0x04, 0x01, 0x05, 0x01, 0x02, 0x01, 0x04, 0x03, 0x05, 0x03, 0x02,
		0x03, 0x04, 0x02, 0x02, 0x02}

	tempPre := pack[:99]
	tempSuf := pack[99:]
	pack = append(tempPre, []byte(serverNameStr)...)
	pack = append(pack, tempSuf...)

	tempPre = pack[:98]
	tempSuf = pack[99:]
	pack = append(tempPre, byte(len(serverNameStr)))
	pack = append(pack, tempSuf...)

	tempPre = pack[:93]
	tempSuf = pack[94:]
	pack = append(tempPre, byte(len(serverNameStr)+5))
	pack = append(pack, tempSuf...)

	tempPre = pack[:4]
	tempSuf = pack[5:]
	pack = append(tempPre, byte(len(pack[5:])))
	pack = append(pack, tempSuf...)
	return pack
}
