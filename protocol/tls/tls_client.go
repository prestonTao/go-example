package main

import (
	// "bytes"
	// "encoding/binary"
	"fmt"
	"net"
	// "time"
	// "math/big"
	// "math/rand"
)

var baiduClientHello = []byte{0x16, 0x03, 0x01, 0x00, 0xd0, 0x01, 0x00, 0x00, 0xcc, 0x03, 0x03, 0x22, 0x9d, 0xcc, 0x74, 0x8c,
	0xa5, 0x18, 0x2e, 0xa7, 0x48, 0x0f, 0xc0, 0x0a, 0xea, 0x13, 0xc7, 0x6f, 0xd7, 0x9d, 0x42, 0x47,
	0xcc, 0x58, 0x6f, 0x99, 0x0a, 0xad, 0x3e, 0x38, 0xdf, 0x6e, 0x69, 0x00, 0x00, 0x28, 0xcc, 0x14,
	0xcc, 0x13, 0xc0, 0x2b, 0xc0, 0x2f, 0x00, 0x9e, 0xc0, 0x0a, 0xc0, 0x09, 0xc0, 0x13, 0xc0, 0x14,
	0xc0, 0x07, 0xc0, 0x11, 0x00, 0x33, 0x00, 0x32, 0x00, 0x39, 0x00, 0x9c, 0x00, 0x2f, 0x00, 0x35,
	0x00, 0x0a, 0x00, 0x05, 0x00, 0x04, 0x01, 0x00, 0x00, 0x7b, 0x00, 0x00, 0x00, 0x12, 0x00, 0x10,
	0x00, 0x00, 0x0d, 0x77, 0x77, 0x77, 0x2e, 0x62, 0x61, 0x69, 0x64, 0x75, 0x2e, 0x63, 0x6f, 0x6d,
	0xff, 0x01, 0x00, 0x01, 0x00, 0x00, 0x0a, 0x00, 0x08, 0x00, 0x06, 0x00, 0x17, 0x00, 0x18, 0x00,
	0x19, 0x00, 0x0b, 0x00, 0x02, 0x01, 0x00, 0x00, 0x23, 0x00, 0x00, 0x33, 0x74, 0x00, 0x00, 0x00,
	0x10, 0x00, 0x1b, 0x00, 0x19, 0x06, 0x73, 0x70, 0x64, 0x79, 0x2f, 0x33, 0x08, 0x73, 0x70, 0x64,
	0x79, 0x2f, 0x33, 0x2e, 0x31, 0x08, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x31, 0x2e, 0x31, 0x75, 0x50,
	0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
	0x0d, 0x00, 0x12, 0x00, 0x10, 0x04, 0x01, 0x05, 0x01, 0x02, 0x01, 0x04, 0x03, 0x05, 0x03, 0x02,
	0x03, 0x04, 0x02, 0x02, 0x02}

func main() {
	// hello()
	// baidu()
	serverNameStr := "www.baidu.com"
	pack := getBytes(serverNameStr)
	fmt.Println(pack, "\nlength:", len(pack))

	fmt.Println(baiduClientHello, "\nlength", len(baiduClientHello))

}

func hello() {

	/*
		16 03 01 00 ba 01 00 00 b6 03 03
		81 45 d2 c7
		db c5 c9 bb 71 82 da 72 17 fe 3f c9 1e 8f 8d 85 c2
		50 25 5d aa c3 81 c4 ca ea 94 90
		00 00 28 cc 14
		cc 13 c0 2b c0 2f 00 9e c0 0a c0 09 c0 13 c0 14
		c0 07 c0 11 00 33 00 32 00 39 00 9c 00 2f 00 35
		00 0a 00 05 00 04 01 00 00 65 ff 01 00 01 00 00
		0a 00 08 00 06 00 17 00 18 00 19 00 0b 00 02 01
		00 00 23 00 00 33 74 00 00 00 10 00 1b 00 19 06
		73 70 64 79 2f 33 08 73 70 64 79 2f 33 2e 31 08
		68 74 74 70 2f 31 2e 31 75 50 00 00 00 05 00 05
		01 00 00 00 00 00 12 00 00 00 0d 00 12 00 10 04
		01 05 01 02 01 04 03 05 03 02 03 04 02 02 02
	*/
	/*
		mandela.io:8081
	*/
	serverNameStr := "104.236.161.121:8081"
	serverNameStr = "www.baidu.com"
	pack := getBytes(serverNameStr)
	conn, err := net.Dial("tcp", "www.baidu.com:443")
	if err != nil {
		fmt.Println(err.Error())
	}
	_, err = conn.Write(pack)
	if err != nil {
		fmt.Println(err.Error())
	}
	fmt.Println("write done")
	buf := make([]byte, 1024)
	n, err := conn.Read(buf)
	if err != nil {
		fmt.Println(err.Error())
	}
	fmt.Println(buf[:n])

}

func getBytes(serverNameStr string) []byte {
	// serverNameStr := "104.236.161.121:8081"
	pack := []byte{
		0x16, 0x03, 0x01, 0x00,
		0xd0, 0x01, //   length
		0x00, 0x00, 0xcc, 0x03, 0x03, 0xbf, 0x8a, 0x36, 0x7d, 0x13,
		0x86, 0x59, 0x90, 0x95, 0x4b, 0xc6, 0x03, 0xe0, 0x53, 0x03, 0x58, 0x6b, 0x28, 0x23, 0x8a, 0x29,
		0xe6, 0x4b, 0xbb, 0x95, 0xe4, 0xb8, 0x52, 0x93, 0x28, 0xe1, 0x55, 0x00, 0x00, 0x28, 0xcc, 0x14,
		0xcc, 0x13, 0xc0, 0x2b, 0xc0, 0x2f, 0x00, 0x9e, 0xc0, 0x0a, 0xc0, 0x09, 0xc0, 0x13, 0xc0, 0x14,
		0xc0, 0x07, 0xc0, 0x11, 0x00, 0x33, 0x00, 0x32, 0x00, 0x39, 0x00, 0x9c, 0x00, 0x2f, 0x00, 0x35,
		0x00, 0x0a, 0x00, 0x05, 0x00, 0x04, 0x01, 0x00, 0x00, 0x7b, 0x00, 0x00, 0x00, 0x12,
		0x00, 0x10, //  server length
		0x00, 0x00, //  server name type
		0x0d, //  length
		//  server name
		0xff, 0x01, 0x00, 0x01, 0x00, 0x00, 0x0a, 0x00, 0x08, 0x00, 0x06, 0x00, 0x17, 0x00, 0x18, 0x00,
		0x19, 0x00, 0x0b, 0x00, 0x02, 0x01, 0x00, 0x00, 0x23, 0x00, 0x00, 0x33, 0x74, 0x00, 0x00, 0x00,
		0x10, 0x00, 0x1b, 0x00, 0x19, 0x06, 0x73, 0x70, 0x64, 0x79, 0x2f, 0x33, 0x08, 0x73, 0x70, 0x64,
		0x79, 0x2f, 0x33, 0x2e, 0x31, 0x08, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x31, 0x2e, 0x31, 0x75, 0x50,
		0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
		0x0d, 0x00, 0x12, 0x00, 0x10, 0x04, 0x01, 0x05, 0x01, 0x02, 0x01, 0x04, 0x03, 0x05, 0x03, 0x02,
		0x03, 0x04, 0x02, 0x02, 0x02}

	tempPre := pack[:99]
	tempSuf := pack[99:]
	pack = append(tempPre, []byte(serverNameStr)...)
	pack = append(pack, tempSuf...)

	tempPre = pack[:98]
	tempSuf = pack[99:]
	pack = append(tempPre, byte(len(serverNameStr)))
	pack = append(pack, tempSuf...)

	tempPre = pack[:93]
	tempSuf = pack[94:]
	pack = append(tempPre, byte(len(serverNameStr)+5))
	pack = append(pack, tempSuf...)

	tempPre = pack[:4]
	tempSuf = pack[5:]
	pack = append(tempPre, byte(len(pack[5:])))
	pack = append(pack, tempSuf...)
	return pack
}

func baidu() {
	pack := []byte{0x16, 0x03, 0x01, 0x00, 0xd0, 0x01, 0x00, 0x00, 0xcc, 0x03, 0x03, 0x22, 0x9d, 0xcc, 0x74, 0x8c,
		0xa5, 0x18, 0x2e, 0xa7, 0x48, 0x0f, 0xc0, 0x0a, 0xea, 0x13, 0xc7, 0x6f, 0xd7, 0x9d, 0x42, 0x47,
		0xcc, 0x58, 0x6f, 0x99, 0x0a, 0xad, 0x3e, 0x38, 0xdf, 0x6e, 0x69, 0x00, 0x00, 0x28, 0xcc, 0x14,
		0xcc, 0x13, 0xc0, 0x2b, 0xc0, 0x2f, 0x00, 0x9e, 0xc0, 0x0a, 0xc0, 0x09, 0xc0, 0x13, 0xc0, 0x14,
		0xc0, 0x07, 0xc0, 0x11, 0x00, 0x33, 0x00, 0x32, 0x00, 0x39, 0x00, 0x9c, 0x00, 0x2f, 0x00, 0x35,
		0x00, 0x0a, 0x00, 0x05, 0x00, 0x04, 0x01, 0x00, 0x00, 0x7b, 0x00, 0x00, 0x00, 0x12, 0x00, 0x10,
		0x00, 0x00, 0x0d, 0x77, 0x77, 0x77, 0x2e, 0x62, 0x61, 0x69, 0x64, 0x75, 0x2e, 0x63, 0x6f, 0x6d,
		0xff, 0x01, 0x00, 0x01, 0x00, 0x00, 0x0a, 0x00, 0x08, 0x00, 0x06, 0x00, 0x17, 0x00, 0x18, 0x00,
		0x19, 0x00, 0x0b, 0x00, 0x02, 0x01, 0x00, 0x00, 0x23, 0x00, 0x00, 0x33, 0x74, 0x00, 0x00, 0x00,
		0x10, 0x00, 0x1b, 0x00, 0x19, 0x06, 0x73, 0x70, 0x64, 0x79, 0x2f, 0x33, 0x08, 0x73, 0x70, 0x64,
		0x79, 0x2f, 0x33, 0x2e, 0x31, 0x08, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x31, 0x2e, 0x31, 0x75, 0x50,
		0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
		0x0d, 0x00, 0x12, 0x00, 0x10, 0x04, 0x01, 0x05, 0x01, 0x02, 0x01, 0x04, 0x03, 0x05, 0x03, 0x02,
		0x03, 0x04, 0x02, 0x02, 0x02}

	conn, err := net.Dial("tcp", "www.baidu.com:443")
	if err != nil {
		fmt.Println(err.Error())
	}
	_, err = conn.Write(pack)
	if err != nil {
		fmt.Println(err.Error())
	}
	fmt.Println("write done")
	buf := make([]byte, 1024)
	n, err := conn.Read(buf)
	if err != nil {
		fmt.Println(err.Error())
	}
	fmt.Println(buf[:n])

}

func example() {
	// index := 0
	// /*
	// 	随机数
	// */
	// min := rand.New(rand.NewSource(99))
	// timens := int64(time.Now().Nanosecond())
	// min.Seed(timens)
	// maxId := new(big.Int).Lsh(big.NewInt(1), uint(512))
	// randInt := new(big.Int).Rand(min, maxId)
	// randBytes := randInt.Bytes()

	// // nowTime := uint32(time.Now().Unix() & 0xffffffff)

	// /*
	// 	一个消息
	// */
	// pack := bytes.NewBuffer([]byte{})
	// pack.Write(22)                                  //握手协议
	// pack.Write(1)                                   //主版本号
	// pack.Write(2)                                   //次版本号
	// binary.Write(pack, binary.BigEndian, uint16(1)) //lenght

	// /*
	// 	消息内容
	// */
	// contentBuf := bytes.NewBuffer([]byte{})
	// contentBuf.WriteByte(1) //client hello
	// contentBuf.WriteByte(3) //SSL主版本号
	// contentBuf.WriteByte(3) //SSL次版本号
	// binary.Write(contentBuf, binary.BigEndian,
	// 	uint32(time.Now().Unix()&0xffffffff)) //时间
	// contentBuf.Write(randBytes) //随机数
	// contentBuf.Write(0)         //session lenght
	// contentBuf.Write(0)         //session id
	// cipherSuiteBytes := []byte{0xcc, 0x14, 0xcc, 0x13, 0xc0, 0x2b,
	// 	0xc0, 0x2f, 0x00, 0x9e, 0xc0, 0x0a, 0xc0, 0x09, 0xc0, 0x13,
	// 	0xc0, 0x14, 0xc0, 0x07, 0xc0, 0x11, 0x00, 0x33, 0x00, 0x32,
	// 	0x00, 0x39, 0x00, 0x9c, 0x00, 0x2f, 0x00, 0x35, 0x00, 0x0a,
	// 	0x00, 0x05, 0x00, 0x04}
	// contentBuf.Write(len(cipherSuiteBytes)) //Cipher Suite Length
	// contentBuf.WriteByte(cipherSuiteBytes)  //支持的加密算法

	// pack = append(pack)

	// serverName := "192.168.1.113"
	// serverNameBytes := bytes.NewBuffer([]byte{})
	// serverNameBytes.WriteByte([]byte{0, 0})                                              //type
	// binary.Write(serverNameBytes, binary.BigEndian, uint16(len([]byte(serverName))+6))   //length
	// binary.Write(serverNameBytes, binary.BigEndian, uint16(len([]byte(serverName))+1+2)) //server name list length
	// serverNameBytes.Write(0)                                                             //server name type
	// binary.Write(serverNameBytes, binary.BigEndian, uint16(len([]byte(serverName))))     //server name length
	// serverNameBytes.WriteByte([]byte(serverName))                                        //

	// contentBuf.Write(0) //compression method length
	// contentBuf.Write(0) //compression method

	// /*
	// 	握手协议
	// */
	// hello := make([]byte, 0)
	// hello = append(hello, []byte{3, 3}...) //SSL协议版本号

	/*
		serverName := "192.168.1.113"       //len = 13
		ppppp := bytes.NewBuffer([]byte{22, //协议类型：握手协议
			3, 3, //协议版本号：3.3
			0, 208, //length       <====================
			1,         //Handshake Type: Client Hello (1)
			0, 0, 204, //length
			3, 3}) //Version: TLS 1.2 (0x0303)
		binary.Write(ppppp, binary.BigEndian,
			uint32(time.Now().Unix()&0xffffffff)) //时间
		ppppp.Write([]byte{0x13, 0x86, 0x59, 0x90, 0x95, 0x4b, 0xc6, 0x03, 0xe0, 0x53,
			0x03, 0x58, 0x6b, 0x28, 0x23, 0x8a, 0x29, 0xe6, 0x4b, 0xbb, 0x95, 0xe4, 0xb8,
			0x52, 0x93, 0x28, 0xe1, 0x55}) //随机数
		ppppp.Write([]byte{0, //session id lenght
			0}) //session id
		binary.Write(ppppp, binary.BigEndian, uint16(40)) //Cipher Suite Length
		ppppp.Write([]byte{0xcc, 0x14, 0xcc, 0x13, 0xc0, 0x2b,
			0xc0, 0x2f, 0x00, 0x9e, 0xc0, 0x0a, 0xc0, 0x09, 0xc0, 0x13,
			0xc0, 0x14, 0xc0, 0x07, 0xc0, 0x11, 0x00, 0x33, 0x00, 0x32,
			0x00, 0x39, 0x00, 0x9c, 0x00, 0x2f, 0x00, 0x35, 0x00, 0x0a,
			0x00, 0x05, 0x00, 0x04, //支持的加密算法
			1,      //Compression Methods (1 method)
			0,      //Compression Method: null (0)
			0, 123, //Extensions Length: 123
			0, 0, //Type: server_name (0x0000)
			18,    //Length: 18         <============================
			0, 16, //Server Name list length: 16
			0,      //Server Name Type: host_name (0)
			0, 13}) //Server Name length: 13         <============================
		ppppp.Write([]byte(serverName))                   //Server Name: 192.168.1.113
		ppppp.Write([]byte{0xff, 0x01, 0x00, 0x01, 0x00}) //Extension: renegotiation_info
		ppppp.Write([]byte{0x00, 0x0a, 0x00, 0x08, 0x00,
			0x06, 0x00, 0x17, 0x00, 0x18, 0x00, 0x19}) //Extension: elliptic_curves
		ppppp.Write([]byte{0x00, 0x0b, 0x00, 0x02, 0x01, 0x00}) //Extension: ec_point_formats
		ppppp.Write([]byte{0x00, 0x23, 0x00, 0x00})             //Extension: SessionTicket TLS
		ppppp.Write([]byte{0x33, 0x74, 0x00, 0x00})             //Extension: next_protocol_negotiation
		ppppp.Write([]byte{0x00, 0x10, 0x00, 0x1b, 0x00, 0x19,
			0x06, 0x73, 0x70, 0x64, 0x79, 0x2f, 0x33, 0x08, 0x73,
			0x70, 0x64, 0x79, 0x2f, 0x33, 0x2e, 0x31, 0x08, 0x68,
			0x74, 0x74, 0x70, 0x2f, 0x31, 0x2e, 0x31}) //Extension: Unknown 16
		ppppp.Write([]byte{0x75, 0x50, 0x00, 0x00}) //Extension: Unknown 30032
		ppppp.Write([]byte{0x00, 0x05, 0x00, 0x05, 0x01, 0x00,
			0x00, 0x00, 0x00}) //Extension: status_request
		ppppp.Write([]byte{0x00, 0x12, 0x00, 0x00}) //Extension: Unknown 18
		ppppp.Write([]byte{0x00, 0x0d, 0x00, 0x12, 0x00, 0x10,
			0x04, 0x01, 0x05, 0x01, 0x02, 0x01, 0x04, 0x03, 0x05,
			0x03, 0x02, 0x03, 0x04, 0x02, 0x02, 0x02}) //Extension: signature_algorithms

		fmt.Println(ppppp.Bytes(), "\n", ppppp.Len())
	*/
}
